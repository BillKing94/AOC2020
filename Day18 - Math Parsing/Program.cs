using System;
using System.CodeDom;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;

namespace Day18
{
    static class RegexExtensions
    {
        public static Match AssertMatch(this Regex regex, string input)
        {
            var match = regex.Match(input);
            return match.Success
                ? match
                : throw new Exception($"Regex does not match. Input: {input}");
        }
    }

    static class Parse
    {
        public static string[] SplitDoubleNewline(this string input) => Regex.Split(input.Trim(), "\\n\\s*\\n");

        public static string[] SplitNewLine(this string input) =>
            input.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(str => str.Trim()).ToArray();

        public static long[] ParseLongArray(this string[] input) => input.Select(str => long.Parse(str)).ToArray();
    }

    // up is -y
    struct V2
    {
        public double X;
        public double Y;

        public V2(double x, double y)
        {
            this.X = x;
            this.Y = y;
        }

        public double Magnitude => Math.Sqrt(this.X * this.X + this.Y * this.Y);
        public double Manhattan => Math.Abs(this.X) + Math.Abs(this.Y);

        public V2 Unit => this * (1 / this.Magnitude);

        public static V2 operator +(V2 p, V2 q)
            => new V2(p.X + q.X, p.Y + q.Y);

        public static V2 operator -(V2 p, V2 q)
            => new V2(p.X - q.X, p.Y - q.Y);

        public static V2 operator -(V2 v)
            => new V2(-v.X, -v.Y);

        public static V2 operator *(V2 v, double a)
            => new V2(v.X * a, v.Y * a);

        public V2 RotateCCW() => new V2(x: this.Y, y: -this.X);
        public V2 RotateCW() => new V2(x: -this.Y, y: this.X);

        public V2 RotateCCW(int times, V2 pivot)
        {
            if (times >= 0)
            {
                var result = this - pivot;
                while (times > 0)
                {
                    result = result.RotateCCW();
                    times--;
                }

                return result + pivot;
            }
            else return RotateCW(-times, pivot);
        }

        public V2 RotateCW(int times, V2 pivot)
        {
            if (times >= 0)
            {
                var result = this - pivot;
                while (times > 0)
                {
                    result = result.RotateCW();
                    times--;
                }

                return result + pivot;
            }
            else return RotateCCW(-times, pivot);
        }

        public V2 RotateCCW(V2 pivot) => this.RotateCCW(1, pivot);
        public V2 RotateCW(V2 pivot) => this.RotateCW(1, pivot);
        public V2 RotateCCW(int times) => this.RotateCCW(times, new V2(0, 0));
        public V2 RotateCW(int times) => this.RotateCW(times, new V2(0, 0));

        public override string ToString() => $"({this.X}, {this.Y})";
    }

    struct V3
    {
        public double X;
        public double Y;
        public double Z;

        public V3(double x, double y, double z)
        {
            this.X = x;
            this.Y = y;
            this.Z = z;
        }

        public double Magnitude => Math.Sqrt(this.X * this.X + this.Y * this.Y + this.Z * this.Z);
        public double Manhattan => Math.Abs(this.X) + Math.Abs(this.Y) + Math.Abs(this.Z);

        public V3 Unit => this * (1 / this.Magnitude);

        public static V3 operator +(V3 p, V3 q)
            => new V3(p.X + q.X, p.Y + q.Y, p.Z + q.Z);

        public static V3 operator -(V3 p, V3 q)
            => new V3(p.X - q.X, p.Y - q.Y, p.Z - q.Z);

        public static V3 operator -(V3 v)
            => new V3(-v.X, -v.Y, -v.Z);

        public static V3 operator *(V3 v, double a)
            => new V3(v.X * a, v.Y * a, v.Z * a);

        public override bool Equals(object? obj)
            => (obj is V3 other) && other.X == this.X && other.Y == this.Y && other.Z == this.Z;

        public override int GetHashCode()
            => this.X.GetHashCode() * this.Y.GetHashCode() * this.Z.GetHashCode();

        public override string ToString() => $"({this.X}, {this.Y}, {this.Z})";
    }

    struct V4
    {
        public double X;
        public double Y;
        public double Z;
        public double W;

        public V4(double x, double y, double z, double w)
        {
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.W = w;
        }

        public double Magnitude => Math.Sqrt(this.X * this.X + this.Y * this.Y + this.Z * this.Z + this.W * this.W);
        public double Manhattan => Math.Abs(this.X) + Math.Abs(this.Y) + Math.Abs(this.Z) + Math.Abs(this.W);

        public V4 Unit => this * (1 / this.Magnitude);

        public static V4 operator +(V4 p, V4 q)
            => new V4(p.X + q.X, p.Y + q.Y, p.Z + q.Z, p.W + q.W);

        public static V4 operator -(V4 p, V4 q)
            => new V4(p.X - q.X, p.Y - q.Y, p.Z - q.Z, p.W - q.W);

        public static V4 operator -(V4 v)
            => new V4(-v.X, -v.Y, -v.Z, -v.W);

        public static V4 operator *(V4 v, double a)
            => new V4(v.X * a, v.Y * a, v.Z * a, v.W * a);

        public override bool Equals(object? obj)
            => (obj is V4 other) && other.X == this.X && other.Y == this.Y && other.Z == this.Z && other.W == this.W;

        public override int GetHashCode()
            => this.X.GetHashCode() * this.Y.GetHashCode() * this.Z.GetHashCode() * this.W.GetHashCode();

        public override string ToString() => $"({this.X}, {this.Y}, {this.Z}, {this.W})";
    }

    static class Clipboard
    {
        public static void Set(object value)
        {
            Console.WriteLine($"Setting Clipboard: {value}");
            Process.Start("bash", $"-c \"echo {value} | xclip -selection c\"")?.WaitForExit();
        }
    }

    class Program
    {
        private const string input = @"4 * 5 + 7 * 2 + 8
                               ((3 * 6 + 2) * 7 + (5 * 4 + 6 + 8)) + 2 * 7 * 5
                               ((5 + 9) + 6) + 6
                               (9 + 3 + 3 + 3) + (2 + (6 * 2 * 3) + 5 * 5) + 3 + (2 * 3 * 6 * 4 * 3 * (7 + 4)) * 6 * 6
                               (4 + (3 * 2 * 8 * 4 + 5 * 8)) + 3 * 9
                               (3 * 9 * 7 * 6 * 3 + 9) * 9
                               8 + 6 + 7 * 2 * 9 * 3
                               (6 * 3 * 8 + (7 + 8 * 3)) * 4 * (3 + 3 * 2 * 8 * 8)
                               (8 + 2 * (2 + 2)) * 2 * 9 * 7 * 3 * (9 * 4 + 6 * 9 + 2 * 7)
                               (4 + 6 * 2 + 8) * 6
                               ((3 * 7 * 5) * 3) + 3
                               ((5 * 4 * 9 * 5 * 2 + 2) + 5 * 9 * 7 * 9 + 5) * 9 + 9
                               7 + 7 * 7 * (4 * (5 + 5 + 9 * 7 * 5) * 3 * 8)
                               3 + (7 * 7 * (3 * 2 * 8)) + 7 + 5
                               3 * 9 + 5 * 7 + 5 * 6
                               5 * 5 * (9 * 4 + (6 + 4)) * 6 + 3 * 8
                               2 + (9 * 7 * 5 + 4) + 3 * (2 * 8 * 2 + 7 + (5 * 8 * 4 * 3) + 2)
                               2 + (7 + 6 + 4 + 3 * 5 * (7 + 6 * 9 * 3 * 6 + 7))
                               (5 + 7 + 3 * (5 * 3 * 4 * 5) + 2 * 2) * 6 + (9 + 4 + (4 + 9 + 2 + 3) + 7 * 4 + (8 + 8)) + 6 + (7 + (5 + 2) + 2 * 8 + 9)
                               5 * 4 * 5 + 8 * (4 * 4 * 4)
                               2 + 8 + 8
                               2 + ((7 + 5 + 8 * 6) * 6 * 8 + 4 + 8) * 6 * 6 + (4 * 8 + 8 + 4 + 5 * 2) + (2 + 8 * 6)
                               (3 + (2 * 7) * 6 * 2 + (5 + 7 * 3 * 2 * 4)) + (7 * 7 * 7 + 7 + 6 * 8) + (6 * 2 * (7 + 7 + 8) + 7 * 7) * 2 + 5 + 4
                               6 + 9 + 3 * ((2 * 3 * 8 + 6) * 8 * 2 + 6)
                               5 + 7 * (5 + 9 + (6 + 7) + 2 * 9 * 9) + 9 + (7 + 6 + (8 * 5) + 9 * 6 * 3) * 2
                               ((6 * 3 + 8 * 5) + 8 * (3 + 8 * 7)) * (2 + 9 * 2 * 8 + 3) * 8 * 5 + 3
                               8 * 6 + 2 * (7 * (8 * 9 + 7 + 4) + 9)
                               6 * (2 + (5 + 6 * 2 * 8) + 4 * (4 + 6)) * ((2 * 7 + 6 + 7 * 6 + 6) * 5 * 5 + (3 * 8 + 9) * 3 * 8)
                               8 * 2 * (2 + 4) * 8 * (7 + (4 * 8))
                               (4 + 8 * 3 + 4) + (2 * 8 * 9)
                               3 + (7 * 6) * 3 + 5 * 4
                               4 * (2 * (8 + 3 * 7 * 5 + 7 * 2) + 3 * 5 + 8 + 3)
                               (9 * (7 + 8 + 7) * 5) + 8 + 3
                               5 * 8 + 8 * 3 * 2 + 4
                               (7 * (9 + 8 + 3 + 7 * 4) + 8 * (2 * 5 * 6) * 5 * (4 + 7 * 4 + 9)) * 2 * 8
                               8 * 7 * 7 * 8 + ((4 * 9 + 8) * 2 + 4 * 8)
                               5 + (4 * 4 * 4 + 4 * (2 + 4 + 4 * 2 * 5 + 9) + 6) + 9 * 5
                               8 * 9 + 8 * ((2 + 6 * 8 + 5 + 7) + (7 + 3 + 4) * 7) + (6 + 7 * 3 + (5 + 4 + 3 * 4 + 9) + 7 + 7) * (7 + 9 * 9 * (6 + 9 + 2 * 7) + 7 + 8)
                               8 * (4 * 3 + 9 + 8) * 8 * 2 + 9
                               (3 * 6 + 6 + 6 + 9) + 6 * 2 + 4 * 2 * 7
                               2 + 7 + (2 + (4 + 2 * 3 + 7 + 8 + 3) + 2) * 6
                               9 * (6 + 5 * 4 * (6 * 3) + (4 * 7 + 7) + (8 + 6 + 3 + 2 * 6 * 5)) + 4 + ((5 * 4 * 7) + 6 + 7 * (6 + 5 * 9 * 8)) + 4 * 4
                               7 * 6 * 3 * 2
                               7 * (3 + 8 * 8) + (3 * (7 + 8 * 3) * (8 + 9 * 4 * 9 * 6) + 8 * 7 * 3) * 4
                               6 * 5 * 6 * (7 * 7 + 6 * 8) * 3 * 2
                               6 * 6 + ((6 * 7 + 4) + 4) + 6
                               7 * 8 * 8 + 9 * 9 + (6 * (3 * 6 + 3))
                               2 + 5 * (7 + 3 + (5 + 6 + 2 * 4 * 3) + 9 + 4) + 3 + (9 * 2 + 4 + 4 * 9) * (4 + 7 * (4 * 2) * 3 * 9 * 5)
                               (8 + 7 * (9 * 6 * 3 + 6)) + (4 + 9 * 6 + 6)
                               4 * 6 * 8 * 5 + 8
                               3 * ((7 * 5 + 5 + 5) + 5 + 4 * 3 * (2 * 2 + 5 + 5)) * 5
                               7 + 5 + 6
                               3 + 3 * (7 * 5)
                               7 + 2 * (4 * 5 * 7 + 5) * ((8 + 7 * 9) + 3 * 7 + 8) + 4
                               8 + ((7 + 8) + (8 * 3 + 7) + (2 * 6 * 7 + 6 * 7 * 7) + 6 + 6) + 8 + 8
                               (2 + 8 + (8 * 4) * 6) + (2 * 2 + 8 + 8 * 6)
                               9 * 9 * 9 + 4 * 4 * (6 * 6)
                               6 * 3 * ((6 + 9 * 7 * 7) * 6 * 5 + 4) * 3
                               (3 + 4 * (4 + 8 * 6 + 3 * 2) * 7 * (8 * 4 * 6) * 2) * 2
                               3 * 3 * 8 * (8 + 8 * 6 * 7)
                               ((9 + 9 * 4) + 3 * 3) * 5 + 2
                               8 * 2 + 2 * (3 * 6) * 7 + 5
                               9 * 2 * 5 + (2 + (2 * 8) * 2 * 8 * 7 * (7 + 7 + 9 + 5)) + 4
                               6 + (7 * 5 + 9) * 3 * 3 * 2 * (4 * 3 + 4 + 9 * (9 * 9 * 4 + 7))
                               9 * 4
                               2 * (6 + 5 + 2 + 6 + 5 * (3 * 6 * 6 * 8 + 8)) + 6
                               ((4 + 7 * 8) + 3 + 6 * 7 + 4 + 8) * 5
                               (5 * 8 + 6 + (7 * 5 + 5) + 6 * 9) + 6
                               4 * (9 + 8 * 3 * 9 + 6 + 3) * 7 * (8 + 6)
                               7 * 8 * 6 * 4 + (4 * 5)
                               5 + 2 + (6 + (9 + 9) + 8) * ((5 * 7 * 3 * 7 + 6 * 6) + (8 + 8 * 7 + 8) * 4 + 6) * 5
                               (9 + 7 + 4) + 5 * 6 + 7 * (3 * (3 * 6 + 7) + (6 + 8 + 4 + 7 + 4 + 7)) + (6 + (8 * 2 + 2 + 2))
                               (4 * (5 * 8 * 9) * (7 * 3) * 9) * 7 + (3 * (5 * 4 * 2 * 7))
                               (2 * 5 + (9 * 3 + 8 * 7 * 5 + 3) * 2 * 7 * (4 + 4)) + (4 * 3 + (8 * 4 * 5 + 6) * (9 + 2 + 4 * 3 + 4 * 9) + 9) + (5 + 3) * 6
                               2 + 7 * 3 * (7 + 9) + 9
                               (9 * (7 + 2 * 8) + 7 * (6 * 5 + 4 * 4 * 8 * 8)) + ((3 + 3) + (3 + 2 * 3 * 5) + 5 + (2 + 4 * 2) * 2 * (5 + 8 * 3 * 3)) + 2
                               7 + (8 + 8 * 3 + 3 * 4 * 4) + 9 + (3 * 9 * 5 + (3 * 2 * 5 + 9 * 6 * 8) * 7 * (5 + 8 + 9 * 7 + 4 + 9))
                               (6 + 6 * 3 + 3 * 2) + ((4 + 2) + 9 * (2 * 9 + 3 * 4 * 7) * 2 * 8 * (4 * 5 + 6)) * 9 * 8 + 8
                               6 + 2
                               4 * ((7 * 6 + 3 + 8 + 4 * 2) + (6 * 4 * 3 * 5 + 2 * 5) * 6 + (7 * 4 + 5) + 3) * 9 * 3 * 2
                               3 + ((9 * 6 * 3 * 6) * 4 * 8 + 3) * ((4 + 4 + 9) + 8 * 4 * 7 * 9) * 3
                               8 * (6 * 8) * (8 + 3 + 6 + 2)
                               8 * 3 * (7 * 3 + 2 + 4 + (8 * 3) + 3)
                               3 + 4 * 4 + 7 + (6 * (5 * 5 + 9) + 7)
                               (7 * (8 + 8 + 5 * 7 * 2 * 7) + 7 + 7 * 4 * 4) * 2 * 2 + 7 * (4 + (6 + 6 + 6) + 5 * 4) * 6
                               9 * 4 * (5 + 2 + 5) * 4 + 3
                               (8 + 7 + (9 + 3 * 8 + 4)) + 9
                               8 + (6 * 8 * 8 * 8 + 6 * 7) + (7 * 5 * (3 + 7 + 4 * 4 + 2))
                               6 + 7 * (3 * 9 + 5 * 6) + (9 * 9) + 5
                               3 * 4 * (7 + 8 * 8 * 7) + 2 + 7
                               (5 * 6 * 6) + 4 + 2
                               (9 + 3 * 8) + 2 * 8 * ((3 + 9 * 6 * 2 + 7) + 7)
                               7 * (9 + (2 * 2 + 5 * 3) * 9 * (5 * 6 + 4 + 6 * 7)) * 9 * 9 + 9 + 2
                               ((3 * 6 + 6 + 7) + 4 + (2 * 4 * 7 * 6) + 9) + 2 + 3
                               7 * 9 + 6 + 5 * (9 * (6 * 9 + 4 * 3 * 3 * 7) + 9)
                               3 + (6 + 4 * 3 * 6 * (3 + 6)) * 9
                               (2 * 5 + 6) * 2 * (5 + (7 * 6 + 3 + 9 + 2)) + 7 * 3
                               5 * (9 + 4 * 7 * 4 + 5) * 4
                               4 + 9 * (6 * 5 * 7 * 4 * 2) * ((2 + 4 * 3) * 8 * (4 * 6 + 5 + 4 + 2))
                               8 + 7
                               2 * 9 * (7 * 4 + 4 + 2 + 4 * 4) * 9
                               (2 * 3 * 4 * 2) * (5 * 3 * 3 + 3 + 3 + 7) * (2 * 5 + 4 + 3 * 2) * 3
                               6 * 4 + (6 + 5 * 4 + 9) + ((7 + 7 * 6 + 3) * 2 + (6 * 8 * 5)) * ((4 * 2) * 5 * 6 * 3 * (6 + 3 * 8) + 3)
                               (9 + 4 * 3 * 8) * ((2 * 9 + 2 * 5 + 7 + 3) * 9 + 7 * 2 * 3)
                               9 + 9 + 5 * ((4 * 3 * 6 * 4 + 4) + 2 + 2 + 4) + 7
                               8 * 6 + 8 * 9 * (5 + 7 + 8 + 9 * 5)
                               2 + 3 * 6 * 8 * 4 * (7 * 4 * (2 + 9 * 3 + 7 + 7) + 5)
                               (6 + 6 * 5) + 7 + 9 * (3 * 6 + 6 + (5 * 5 + 3 + 5 + 4 * 9)) + 5
                               7 * (2 + 5)
                               4 * 3 * (3 * 3 * 9 * 5 + 3) + 2 + 8 * 3
                               (4 + 4 * 4) + 2 * (9 * (5 * 9 + 6 * 5 * 2 * 9)) * 6 * 8 + (5 + 4 * (5 * 7 * 4 + 2 + 9 * 7) + 4 * 7)
                               (7 * (6 * 3 * 2 * 8 * 8)) + (9 * 4 + 5) * 5 * ((5 + 8 * 5 * 6) + 8)
                               6 + 3 * 4 + (3 + 2 * 8 + 4) + (6 + 9 + 5)
                               8 * 2 + ((5 + 8 * 8 * 8) * (2 + 2 + 9 + 6 + 8 * 2) * 7 * 7 * (4 * 5 * 7 + 7)) * 9
                               8 + (2 * 8 * 9 + 6 * 9) + 9 * (9 * 5) + (4 * (7 + 9 * 7 + 5 + 7) + 6 * 6 + 5 * 6)
                               6 + (2 + 2) + 2 + (9 * 7 + 8 * 3 * 6 + 3) + 9
                               6 + 4 * 8 + ((7 + 8 + 3 * 9 * 6 * 8) + 4 + 5 * (9 * 6 + 3 * 5 + 3)) * 7 + 2
                               (7 + 5 + 4 * (5 * 3) + (7 * 5) + (5 * 8 * 2 + 2 * 3 + 2)) * 6 * 5 * 4 + 5
                               3 + ((3 + 8 * 8) * 2 * 8 + 8 + (7 + 5 + 5 * 6 + 9)) * (9 + 9 + 9) * 9 * 3
                               (6 + 3 + 4) * 5 + 3 + 4 + 8
                               ((9 + 7 * 9 + 6) + 6 + 9) + 6 * 6 + (4 * 4 + 7) * 6
                               6 * 6 + 9 + 3 + 4
                               9 * 9 * 7
                               5 * ((6 * 6 + 7 + 7) * 8 * 8 + (2 * 8 * 6 + 3 * 7) + (7 + 9 + 8 * 6 + 3)) + 3
                               (5 * (3 * 4) * 2 + 5 * (6 + 9)) + 9 * 2
                               (8 * (4 + 2) + 5) + 9 + 8
                               ((4 + 4) * 4 * 4) + (9 * 5 * 9) * 4 * 8 * 9 * 6
                               3 * 5 + 8 * 4 * 2 * 7
                               2 + (2 + 9) + 2 * 4 + (8 * (6 * 9 * 3 + 2) + 5) + (9 + 2 * (2 + 9 * 9 + 6))
                               3 + 6 + 4 * (6 + 4 * 4) + 5
                               6 + (6 * 9 * 8 * 6 + (5 * 7 + 4 * 3) * 9) * 2
                               (4 * 3 * 2 + 9 + 2) + 8 + 7
                               (7 + 7) + 6 + 7
                               (6 + (3 + 4)) * 3 * 4 * 4
                               2 * (3 * (6 + 8) + (6 + 8 + 8) + 5 + 3 + 9) + 8 * 7
                               (8 * (3 + 4) + 8 + 2 * 5 + 2) * 5 + 6 * 9
                               6 + (4 * 3 + 8 * 7 * (5 * 8 * 2 + 6 * 9 * 4)) + 7 * 7
                               2 + 4 * ((6 * 7 + 7 * 6 + 2 + 8) + 3 + 6 * 2 + (5 + 8 * 9) + 4)
                               6 * 3 * (6 + (7 + 6 * 9) * 8 * 9 + 3 * 3) * 4 + (8 * 6 + (2 + 8) + 9) * 7
                               6 + ((9 + 7) + 6 + 5 * 6 * (8 + 7)) + 6 + (2 * 9)
                               9 + 8 * 3 + (6 * 8 + 5 + 9 * 8) * (9 + 2 + 9 + 3 + 4 * (6 * 9))
                               8 + (8 + (8 * 4 * 7 * 8) * (9 * 7 * 2) * 4) * ((9 + 9) + 3 * 4) * 5 + 5 + 3
                               9 * (2 + 8 + 3) * 7 * (8 * 7) * 3
                               8 + 5 + (2 + 7) * 6
                               9 + (3 * 5 * 2 + 9) * 9 + (2 * 9 + 4 + 6 * 7)
                               6 + (9 * (9 * 5) + 5 * 8) + 6 + 4 + 3 * 7
                               9 * (7 + 4 + 9 * 3 + (5 * 2 + 8) * 4)
                               4 * 2 + 2 * 2 + 4 + 3
                               (4 + 7 + 6 + 3 * 6) * 6 * 9 * 6
                               5 + 7 * 9 * (3 + 3 + 8 + 4 * 7 * 5) + 7 + (3 + 7 + 5 * 5)
                               (7 + (8 * 2)) * 3 * 3 + (2 * (3 + 3) * 8 * 4)
                               6 + 4 * 7 + ((9 * 2 + 6) + 7 + (9 * 7 + 5 + 5 + 6) + 4 + 9) * 8 + 8
                               4 + (2 + 2 + 6 * 2 * (8 * 3 + 4)) + ((2 + 7 + 8 * 5) + 6 + 8 * 4 * 3)
                               9 * 8 + 4 * 9 * ((6 * 3) * 5 * 6 * (2 * 5) * 5 * 2) * 9
                               9 * (7 + 9 + 3 + 5) + (8 * 3 * 7 * 7 * 9 + 3) * 7 * 5
                               4 + (4 + 3) + 6
                               9 + (9 + 8 + 5 * 3 * 9 * (8 + 3 * 2 * 9 + 5)) * 8 * 3 + (2 * 3 + (2 * 9 + 4 + 3 * 4) + 5)
                               ((8 + 8) + (6 + 4 + 2 * 6 * 3)) * 6
                               7 + (2 * 6 + 4 + 8 + 8 * 7) * 8 + 7 * 6
                               7 + 8 + 4 * (5 * 4 * 9 + 5 + 8) * 3 + 2
                               (6 + 5 + 4 + 7 + 4) + 8 + 7 * (7 + (7 * 7) * 4 * 4 + 4 + (9 * 4 * 3 + 9 * 5)) * 7 * 8
                               (7 + 3 + (3 + 7 + 8 + 9 * 6) * 9 * 5) * (2 + (3 + 6 + 7 * 2) * (7 * 3) + 9)
                               (9 * 7 + (8 + 6 + 2 * 5) * 6 * 9) + 4 + 3
                               (8 * (5 + 2 * 2 + 6 + 8 * 9) * (4 + 3 + 7 + 4 * 4 + 6) * 2) + 6 + (5 * 9) + 3 + 9 + (8 + 3 + 9)
                               ((7 + 3 * 3 + 6) * 8 + 7) * 9 + (2 + 5 + 4)
                               (3 * (2 + 8 + 7 + 4 * 2)) + 6 * (9 + 5 * 2 + 5 + 7 * 3)
                               (9 * 6 + 6 + 5) + (5 * (4 * 5 * 8 * 2 * 6) + (3 + 6 * 2 * 4 * 5 + 9))
                               (7 * (8 * 7 * 6 + 9 * 5) + 3 * 7 * (7 * 9) * 7) * 2 * 4 * 4
                               4 + 3 * (2 * (4 + 3 + 6) * 6 + 7 * 3 + (8 * 5 * 6 * 6)) * 7
                               9 + (6 * 2 + (3 + 2 * 5 * 6 + 8 + 9) * 8) + ((6 * 3 + 6 * 2 * 4 * 4) * 8 + 5)
                               ((5 + 6 + 8 + 7 + 2) * 9 + 2) * 7 + 2 + 5
                               ((9 * 8 + 5 * 3 * 4) * 4 + (9 + 3) + 3 + 6) + 7 * (7 * 4 * 2 + 2 * 9 + 3)
                               9 * (4 * 4 + 3 * 2) * 3 + 7 + (2 + 2 * 7) + 2
                               4 + 2 * (6 + 7 * (6 * 2 + 7 * 6 * 4)) * (3 + 5 * 7 * (3 * 7 + 8 + 3 + 3) + (3 * 2 * 7))
                               7 + 4 + (7 + 8 + 5 + 7 + 5)
                               7 + 4 + 8 + ((5 + 2 + 5 * 6 + 5 * 2) + 6 * 8 + 6 + 3 * (6 + 3 * 2 + 8 + 4 + 4)) * 8 * 9
                               (3 + 7 + 2 * 4 * (2 * 9 * 7 * 2 * 2 + 3) + (6 * 7 * 2 * 2 + 9 * 4)) + 2
                               5 * 2 * (4 * 7 * 7) * 6
                               5 * (3 * 8 * (4 * 8 + 8)) * 3 * 9 + 5 * 4
                               (6 * 2 * 5 * 4) + ((5 + 7 + 7 + 6 * 9 * 4) * 8 + 4 * 9) * 9 * 4 * 6 * 6
                               5 + (7 + 6 + 9) * 9 + 4 + 3 * 8
                               2 + (7 + 7) * (7 * 9 + 4) * 7 + ((4 + 7 + 8 * 2 + 3 + 5) * 2 * (8 + 2) * 4 + 4) * 6
                               3 + 8 + 5 * (2 + 2) + 9 + (5 + 7 + 2)
                               9 * 7 + 4 + (7 + 2 * (4 + 7 * 4 + 9 + 7 + 2)) * (7 + (2 + 7 * 5 * 4 + 9))
                               8 * 3 + 5 * 3 * ((2 + 8 + 4 + 7 * 4) * 7 + 3 * 7) + 6
                               ((7 + 2 * 3 + 9 * 4) * 4 * (5 + 9 + 9) * 9 + (7 * 7)) * 2 + 9
                               5 + 4 + 9
                               4 * (7 * (4 + 9 + 3 * 7)) * 2
                               (5 * 9 * 3) * 4 + (6 + 2 + 7 * (4 + 2) + 2) * (9 + 9 * 8 * 9 + (9 * 3 + 9 + 7 * 2)) + ((3 + 4 + 2 + 3) + 2 * 9 + 6)
                               (3 + 3 + 5 * (8 * 9) * 7) + 4 + 7 * 5
                               (9 + 3) + 3 * ((5 + 7 * 2 + 6 * 3 + 4) + 6) * 7
                               9 + (3 * 5 + 7 + 4) * 5 * 9 * 3 * 4
                               5 * ((7 + 7 * 7) + 9 + 2 + 3)
                               (9 * 6 * 3 * 5 + 3) * 3 + 8 + 4 + 9 + (3 * (6 + 9 + 8 + 9 * 2 + 4) + 7)
                               2 * 4 + 8 * 2 + (2 * 2 + 5 + 3 + 4 * 7) + 9
                               (5 + 3) * 4
                               (8 + 2 * (8 * 9 + 8 * 4 + 3) * 9 + 8 * 2) + ((5 + 2 * 7 + 8) * 5 * 6) * 3
                               2 * 3 + ((4 * 7 + 6 + 2) * 5 * 5 * 7 * (2 + 3 * 6 + 6 + 3 * 3)) + (9 * 8)
                               ((4 + 4 + 9 * 7 * 4) * (9 * 4 * 5 * 9 + 2 * 7) * 4 + 2 + 6) + 4 + 5
                               6 + 8 * 3 * (4 + 5 * 7 * 8 * 4 * 8)
                               9 * (5 * 4 + 5) * 8 + 4 + 6 * (5 + 3 + 9 + 4 + 7 + 2)
                               4 + (2 * 3 + 8 * 3 + 7 + 2) + 9 + 6
                               2 + (6 * 4 * 9 * (6 * 2 * 4 + 4 * 8 + 6) + 6) * 2 + 8 * 5 + 4
                               8 * 8 + 6 * (4 + 3 + 3 * 9 * 9 + 9) * (4 * 9 * 6 + 2) * 7
                               ((3 * 2 * 4 * 8) + 7 + 7 * 6 + (3 * 4)) * 7 * 2 * 7 * 8
                               8 + (8 + (2 + 6 * 5) * (9 * 5 * 3 + 8) + 9)
                               (2 * 5 + 8 * 3) + 9 * 4 * 9 + 5 * 2
                               3 + 9 * (6 * 6 + 8 * 4 + 9) + 4
                               (8 * 9) + 4 * 4 + 9 * 3 + (7 * 2 * (3 * 4) * 8 * 8)
                               5 * 5 * (9 + 8 * 6 + 3) + 4
                               4 + 9 + (4 * 5 + (6 * 7 * 9 + 9) + 5 * 4) * 7 * 4 * 7
                               (4 * 2 + (3 + 8) * 6 * 5 + 5) + (9 + 9 + 2 + (2 * 9 * 9 + 9 + 4) + (4 + 6 + 2 + 6)) * 3 + 2
                               9 + (5 * 5 * (4 + 3)) + 3 * 9 * 5 + ((3 * 5 + 6) * 7 * 2 + 2 * 3)
                               (2 + 6 * 9 + 8) + 3 + (6 + 9 + 4 + 7 * 8)
                               6 * 4 * (2 + (4 * 4 + 6 * 9 + 3) + 9 * 9) * 3
                               (7 * (2 * 8 * 7 + 8 + 2 + 7) * 7 + 3) + 4 + 3 + 5 * ((4 + 9 + 8 + 7 * 9) + (7 * 5 * 3 + 8 * 8 + 5) * 5) + 8
                               ((4 * 5 + 8 * 6) * 5 * 9 + 5) + 8 + 5 * 3
                               9 * (3 + 2 + (3 + 7) + 7 + (5 + 6 + 6 + 3 + 3)) * 8
                               3 + (2 * 8) * ((6 + 9 + 8 * 7) * 9 + 7) * 8 * 2 + 7
                               (3 + 8 * 2 + 5 * 2) + 8 * (4 + 4 + 5 * 7) * (4 * 5) * 9
                               8 * (6 * (5 + 9 * 3 + 5 + 7) * (5 + 6 * 2 + 3 * 5 + 2) * 2)
                               (2 + 3 * 7 * (2 + 7 * 7) + (5 + 2 * 3 * 5 + 7 * 7) + (6 * 9 * 3 * 8 + 7)) + 8 + 3 * 3 * 2 + 9
                               5 + 5 + 3
                               8 * 6 + 9 + ((9 + 3 + 5 * 3 + 6) + 3 * 6)
                               7 * (3 + (5 * 8 * 9) + 5 + 7 + 3) * 3 * 9 * 8
                               5 * (3 * 8 * 8)
                               8 + 7 * 7 + 5 + (2 + 4) + 8
                               2 + 9 * 7 * 6 * 9
                               9 + ((8 * 7 * 5 * 8 + 9) + 2 * (7 * 9 + 8 * 4) * 4)
                               ((9 * 5) + (2 * 3 * 3 + 8 * 4) + (6 + 7 * 4) * 3) + 2
                               6 * 5 * 5 + 3
                               7 + 9 * 7 * 4 * (3 + (9 + 9 * 5 * 8) + 5 * 9 * (7 * 8 * 9 + 3 * 9 + 3) * 9)
                               2 + 6 * 9 + 3 + (7 + 7 + 6 * 3) * 2
                               (5 * 4 + 6 + 5 * (2 + 3) * (8 + 3)) + (6 + 9 * 9 + 3 + (6 + 6 * 7 * 3 * 4) * 2) * 7 * 4 + 7 + 5
                               2 * (6 * 2 + 8) * 6
                               3 + 2 + 3 + ((7 + 3 * 2 + 5) + 4)
                               5 + ((3 * 2 * 2 + 4) + 5 * 4 + 3) * 7 + 6 + 7 + 6
                               7 + 8 * (6 * 7 * (4 + 6) + (5 * 8 + 4 * 6) + (4 + 4 + 2 * 5 * 7 + 2) + 3)
                               9 + ((5 * 5 + 5 + 5 * 6 + 4) * 2 * 9 + (8 * 6 * 3 + 6 * 8) + 8) + 6
                               2 + 9 + (6 + 9) * 8 * 3 + 4
                               4 * (5 + 9 + 7) * 9 * (6 * 2 + 2 + 9 * 5 + (6 + 9))
                               ((7 * 6 + 2) + 8 * 5 + 9 + 4 + 4) + 8 * (6 + 7 * 4 * (3 + 5 + 5) + 6 * (6 + 7 + 5 * 4 * 5))
                               (7 * 5 + 6) + (6 * 6)
                               5 + (6 * 9 + (9 * 3 * 4 + 2 * 8) + 5 + (3 * 9 + 4 * 9 * 7)) + 9 * 8 * 4
                               (8 + 8 + 7 * 9) + (8 + 9 + 2) + 4 + 7
                               8 + (9 * 3 + 7 + 6 * 7)
                               3 * ((4 * 6 + 6 * 9) + 8) + (5 + 6 * 8 * (5 * 2 + 3 + 8) * 3 + 5) + 7 + (3 + 3 * 2 + (4 * 2))
                               5 * (2 + (8 * 7) + 2 * 7 * 2) * 3 + 9 + (5 * 5 + 8)
                               2 + 4 + (8 * 9 + 9 + (5 * 4) + 8) + 5 * 4
                               3 * 3 * (7 * 4 * 4 + (8 * 9 * 7 + 6) * 3 * (9 + 7 + 6 + 6)) * 9
                               6 * ((9 * 8 + 9) + 9 * 3 * 5 + (8 + 8 * 2 * 7 * 8 * 4) + 4) + 2 + 2 * 5 * (9 + (2 + 5 * 6 + 7 * 2 + 7) + 5 * 4 + 6 * 3)
                               (8 * (3 + 5 * 7 + 6 * 8) + 5 + 4) + 5
                               (5 * 2 + (4 * 5 + 7) + (7 + 5 + 5 + 8)) * 2 * ((5 + 7) + 4 * 4) * (8 + (4 * 5 + 8) + 5 + 9 + 8)
                               (7 * 8) + 2 + 2 * 4 * 6
                               ((7 * 8) + 5) + (8 * 2 + 5 + 8) + 3 * ((8 + 7 * 9) * 8 + (8 + 9 * 8 + 2 * 9 + 6)) * 6 * (9 * 6 + (4 + 7) + 7 * (8 + 8 + 8 * 3) * 3)
                               3 * ((2 + 3 + 3 * 5 * 6 + 9) * 2 + 3 * 6) * 9 * ((6 * 8) + 6 + (3 * 6 * 3) + (9 + 5 + 6)) + 2
                               9 * 3 + 7 * 5 + ((3 * 8 + 4 * 5 * 5) * 5 + 8 * 2 + (2 * 5 * 3 + 5))
                               (9 + 7 * 6 * 5 + 6) + 6 + 6 * 9 + 5
                               5 * 5 + 6 * 3 * 8 + (4 + 2 * 3 + 5)
                               9 + 9 + 6 * (5 + (8 * 9 * 9 + 5 + 8)) * ((9 * 5 * 8 + 8 * 7) * 4 * 9 + (7 + 2 * 5 + 7 * 3)) * (9 + 6)
                               7 * (7 + (5 * 7 + 9 + 9 * 7 + 2)) + 3 * (7 + (5 + 8 + 5 * 5 * 4) + 8 + 9) * 5 * 7
                               (8 * 8 * 9 + 5 * 5 * 2) * ((8 + 3 + 6 * 3 + 5 + 4) + (4 + 8 * 4) * 6) + ((2 * 7 * 5 * 5) + 9 * 4 + 3) * (6 + 7 * 9 + 3 + 4) * 4
                               (2 * 7 * 8 * (7 + 4) + 8 + 7) + 4 * 4 + 7
                               6 * 6 + (8 + 2 + 7) * 9 * (5 * (2 * 4 * 8 + 3 + 9))
                               (8 * 7 + 7) * (7 * 6 * 3) + 7
                               ((7 * 5) + 3 + 7 + (3 + 2 * 7 + 9)) + 7 + (4 + (9 * 4))
                               3 + 7 + 9 + (2 * 6 * 2 * 5 + 2 + 4) * (6 * 7) + 8
                               6 * 4 * 7 * ((6 * 4 * 6 * 8 * 2) * (2 + 6 * 3 + 8 * 2) + 5 + (5 + 3 + 2 + 5 + 9) * (5 * 4))
                               8 + 5 + 4 * (8 * 6 + 9 + 7 * (3 + 9 * 9 * 8) + 9) * 4
                               2 * 6 + 6 * ((8 * 3 * 7 + 7 + 8 + 3) * 9 + 6 * 8 + 5)
                               (3 * 2 + 5 + 5 + 3 * 9) * 5 * 7 + (9 + (7 + 9 + 4 + 8) * (6 + 8 + 2) + 8) * 7
                               5 + (8 * 4) + 5 * 2 * (2 + (9 * 2) * 5)
                               7 + (4 * 4 * 9 + 6) + 9 + 2
                               ((4 * 4 + 5) + 7 + 2 * 8 * 8 * 7) * 8 * (2 + 7 + 8 + 3)
                               (9 * 4 * 5) + 5
                               7 * 3 * (4 * 2 + 4) * 9 * (6 + 8 + 9 * (8 * 9 * 8) + 5)
                               2 * 5 + 6 * ((3 + 8 + 3 * 3 * 6) + 3) * 4
                               6 * 4 * 8 + 5 + (9 + 2 * (6 + 4 * 4 * 4 + 9)) * 6
                               (8 + (3 + 3 + 3 * 4) + 8 * 7 + 3) + (7 + 3) + (5 + 3 * 8) * (7 + (3 + 8 + 2 * 7 * 7)) * 3
                               3 + 4 + 7 + 2
                               3 + 5
                               7 * (5 * 9 * 3) + 6 * 3
                               6 * (3 + (7 + 9 + 7 + 7) * 2 + 8 * 2) + 4 + 9 * 6 + 9
                               (6 * 8) * 5 + 2 * 6
                               6 + 3 + 2 + 8
                               5 + 4 + 7 * 5 + ((2 + 5 * 3 * 8 + 5 + 9) * 3)
                               3 * 2 + 7 + 2
                               9 * 6 * 5 + (3 * 6 * (3 * 5 + 4)) * 7 * 7
                               (9 + 7 * 7 + 9 * 7) + (2 * 2 + 4)
                               8 * 8 * ((3 + 8 + 5) + (4 * 7 + 9) * 7 * (8 * 7 + 9)) + 3
                               3 + 9 + 4 + (9 * 6 * (4 * 8 + 3))
                               ((7 * 9 + 3) * (7 + 5 + 9 * 3 + 4)) + 2
                               8 * (9 + 2) * ((5 + 4 * 7) + (7 + 7 * 5 * 8 + 6) * 8)
                               (8 + 4 + 3) + 3 + (3 + 2 * 3 + (6 * 6 + 4 + 3 * 3 * 2)) + 4 + 4
                               3 + 6 + 3 + 2 + 2
                               8 + (8 * 8 + 5 + 9 * (4 + 5 + 9 * 2) + 6)
                               6 + 3
                               2 + 7 * (5 + 2 * 8 + 4 + (3 + 8 * 6 + 6 * 8) * 2) * 9 + (8 + 8 * 3 * 7 + 2 + (4 * 5 * 4 * 2)) * (8 + 7)
                               8 + (6 * 4 + 7) * 5 + (5 + 9 + (6 * 4 + 9 + 6 + 8) * 5) + 9
                               8 * (2 * 8 + 4) * (3 * (8 + 6 * 8)) + 4 * 2 * (5 + 4 + (7 * 7 * 6 * 6 * 8 + 4) * 2 * 7)
                               ((7 * 4) + (9 + 6 + 7)) + 3 + 8 * 7 * 4 * 7
                               6 * 4 + (5 + 2 + (5 * 5 * 2 + 6 + 7) + 7 * 3) + (3 * 2) * 4
                               6 * 2 * 3 * (3 * (8 * 2 + 5) * (8 * 7 * 2 + 4 * 8) + 8 + (8 * 2) * 2) * 9
                               5 + 6 * 2 + (2 + 2 + 7 + 8 * 6 * 6) * 3
                               7 * 2 * 5 * 8 + (2 * 4 + 7 * 3 * 4) + 3
                               8 + 8 * ((8 + 5 * 2) + 3 + (8 * 8) + 6 + 6 + 6)
                               (3 + 2 * 2 + 2 + 3) * ((7 + 3) * 8) + 9 * 3 + 2
                               6 + 4 * (5 * (2 + 3 * 9 + 4 + 4) + 7 * 8 + 2 * 8) * 7 * 9 * 6
                               7 * (3 * (9 + 9 * 3) + 7 * 8 + 9)
                               8 + 5 + 4 * ((2 + 6 + 5 + 9 + 9) * 7) + 4 * 5
                               5 + (3 * 3) * 7 + 7 * 9 * 8
                               2 + 3 + (4 + 9 * 7 + 8 + 7 * 3) + (3 + 4 * 5 * 6 * 8 + 8) + 6 + ((6 * 4 + 8 * 6) + 5)
                               2 + (5 + 5 + (3 + 5 * 9 + 5 + 3) * (7 * 5 + 3) + (9 + 6 + 2 * 8 * 8 + 5) + 6) + 2 * 4
                               (3 + 5) + 4 * ((3 + 4) + 8 + 7) + ((6 + 3 + 6) * 4 * 5 + 3 + 6) * ((3 * 8 + 9) + (5 * 7 + 3) + 3 + 2 + 2)
                               6 + (9 * (5 * 7 * 6) * (6 * 4 * 7 + 6) + 4 + 8) + 6 * 8
                               5 + (6 * 4 * 7 + 5 * 6 * (8 + 7 * 5 + 6 * 7 * 8)) * 7
                               5 + (6 + 4) + (5 * 4)
                               7 + (7 + 3 + 8 + (6 + 7 + 2 * 4)) * 3 + 2 * 6
                               6 * (3 * (4 * 7) + 8) * 6 * (2 * 6 * 3)
                               ((6 + 5 + 3) + (7 * 8)) * 3
                               9 * ((6 + 5 + 5 + 8 + 4) * 5) * (6 * 4 + (8 + 7 * 2 * 3 * 6 + 6)) * 4 * 9 + 2
                               (3 + (6 + 5 + 7 * 4 * 7 + 5)) * (4 + 4 + 7 + (2 + 3) * 2) + 8 + 6 * 4 + 5
                               (4 + (4 * 7) + 9 * 5 + 2 * 3) + 7 * ((4 * 9 * 8 + 8 + 9) + 5 * 4 + 3 * 2 * 4)
                               (7 + 2) * 7 * 7 * 4 * (9 * 6) + 9
                               9 * 2 * 4 * (2 * 5 * 7)
                               2 * 7 * (3 * 8 + 4 + 6 * 9 + 5)
                               ((2 + 5) * 5 * 9 * 8 * 8 + 5) + 6 + (5 + (6 + 8 * 8 + 3 * 2 * 7) * 6) * 9 + 2
                               (3 + 5 * 9 + 7 * 9) + 5 * (9 * 8 * 5 * 3 * 8 + 8) * 2 + 5 * 3
                               (7 + 6 * 2 + 9 * 9) * 2
                               4 * 7 + 7 + (5 + 3 + 3 * (4 + 2 * 3 * 6 + 2 + 4) * (5 * 8 * 6 * 4 * 5) + 3) + (5 + 3 * 6) + 5
                               3 + 7 + 5 + 9 + ((4 * 5 + 2) + 5 + 6 * 9) * 5
                               7 * (3 + 7 * 9 * 6) * 2 * 4 * (3 * (6 + 3 + 3) * 4 * 9 * 2) + 7
                               (9 + 6 + 6 * 3 * (8 * 8 * 3)) * 6 * 4 * 7 * 6 * 2
                               (6 + 3 * 5 * 7) * 3 + 8
                               4 + (3 + (5 + 7 + 7 + 8 * 6 + 4))
                               3 * ((4 + 2 * 3 + 9 + 3) * 5 + 8) + 4 * (4 + 4) + 2 + 9
                               6 + ((3 + 3 + 7 + 9 * 9 * 7) * 5 * 6 + 4 + 5 * 4) * 6 + ((4 + 5) + 6 * 4 + 3 + 7) + (5 + (2 + 3))
                               2 * ((4 + 6 + 2 + 7 + 7) * 4 + 9)
                               (5 + 3 + 8) + 6 * 6 * 6
                               6 + 6 * ((6 + 6) + 8 * 4 + 6 + 3 + 7) + 5 * 6 + 6
                               5 * 8 + (9 * (5 + 5 * 2 * 9 + 5 * 3) * 2 * 9 + 4) * 2
                               4 * 5 + 8 * (7 * (5 * 9 * 7 + 4) + 3) + 9 + 7
                               2 * 8 * (6 * 9 * (4 * 6 * 8 + 5) + 4 * 4 * 8) * 6 * 6 * 8
                               9 * 7 + 4 + (4 + 3 * 8 * 5) * (4 * 5 * 5 + 7 + 6)
                               4 * (6 * 3 + 8 + 3 * 5) * 2 + 7 * 5
                               (4 * 2 + (9 * 3 + 9 + 4 + 2 * 5)) * (7 * 7 * 4 * 7 * 7 * 4) + 3 + 9 * 8 * (9 * 8)
                               5 * (9 * (7 + 2 + 8 + 5 + 7) * 8) * 7 * (6 * 4 + 4 + 9 + (9 * 9 + 2) + 7) * (3 + 8) * 2
                               2 * (6 * 7 * 2 + 7) * 5
                               6 + 9 + 2 * (9 * 2)
                               ((7 * 2 + 8 * 3 * 6) * 5 + 6) * 8
                               (3 * 6 + 8 * 2 + 3 + 8) * 6 + 7
                               2 + (9 * 7 + (4 + 9 + 6 * 8 + 6) + 2 + 3 + 4) + 6 * 8 + 4
                               (8 * 6 * 8 + 4 + 3) * (8 + 4)
                               (3 + 2 + 5 + (2 + 9 + 2 * 2 * 5 * 9) * 2) * (7 + 5 + 6 * 6 * 9)
                               7 + 3 + 4 + 7 * (8 + 5 * 2) + 3
                               (8 * (8 + 2 * 3 * 7 * 7 * 8) + 7) + 5 + ((2 * 7 + 9 * 9) + 5 * (6 * 7 + 2 * 8 * 5) * 7 * 4 + 5) * 2 * (5 + 9 * 7 + 8) + (5 + (8 * 7 * 7 * 7 + 3 * 3) + (5 + 4 * 3 + 4) + 6 * 6)
                               9 + 4 * (9 + 3 + 3) * (7 + 7 * 4 * 4 + 9 * (3 + 5 * 7)) + 7 * 4
                               3 * 6 + (4 * 3 * 5 * 8) * (9 * 2 * (2 + 6 + 4))
                               4 * (8 + (8 + 6) * 4 * 7)
                               (6 * 6 + 6 + 4) * 8 + 5 * (9 + (8 + 3 + 2 + 5 * 8 + 3)) * (9 + (8 + 9 * 4) + 7) + 5
                               6 * 3 * 7 * 2 + (6 * 2 + (4 + 4 + 2 + 7 * 8 * 2))
                               (5 * 6) * (9 + 6 + 3 * 6 * 4 * 3) + (8 * 7 + 5)
                               4 * 2 + 3 * ((9 * 3 * 8 * 3 * 7 * 2) + 6 * 3 * (9 * 7 * 9 + 6 * 5) * 4 + 7) + 3 + (2 + 9 * 3 * 9 + (7 + 7 * 3 + 4))
                               ((5 * 2) + (6 * 5 * 4) + 9 + 4 * 7 + 7) * 8
                               2 * 8 + (7 * 2 + 6 + 8)
                               9 * 4 * 7 * 7 * (2 * (7 * 7 * 8 + 9) + 6 * 5 * (4 + 8 + 5 + 3)) + 8
                               2 * 8 + 4 + 2 * 2 * (7 + 4 * (4 + 9) + 6 * 4 + 5)
                               9 + 4 + 3 * (7 * 7 + 9 * 8 * 5 * (3 + 2 * 5 * 6)) + 8
                               4 * 8 * (6 * (6 + 7 + 9 * 3 * 5)) * 4 * 8 + 3
                               4 * 7 + (7 + 4 * (6 * 7)) * (7 + 7 + 6 + (2 + 9 + 6 + 5) + 6) * (8 * 2) + 3
                               (6 + 8 * 8 * 4) * 2 + 2 * 9
                               8 * (9 * 7 * 5 + (9 + 8 * 4)) * 9 + (9 * 9 * (3 * 8 + 4) * 9)
                               (7 + 4 + 6 * (5 * 3)) * 5 * 8";

        private const string sample = @"2 * 3 + (4 * 5)";
        private const string sample2 = @"5 + (8 * 3 + 9 + 3 * 4 * 3)";
        private const string sample3 = sample + "\n" + sample2;

        private const string sample4 = @"1 + (2 * 3) + (4 * (5 + 6))";
        private const string sample5 = @"2 * 3 + (4 * 5)";

        static void Main(string[] args)
        {
            var lines = input.SplitNewLine();

            (string token, int offset) readNextToken(string expr, int startPos)
            {
                if (startPos >= expr.Length) return (null, 0);

                int length = 0;

                int nParens = 0;
                while (startPos + length < expr.Length)
                {
                    char c = expr[length + startPos];
                    if (c == '(') nParens++;
                    else if (c == ')') nParens--;
                    else if (c == ' ' && nParens == 0)
                    {
                        break;
                    }

                    length++;
                }

                return (expr.Substring(startPos, length), length + 1);
            }

            long resolveValueToken(string token)
            {
                if (token.StartsWith('('))
                {
                    var subExpr = token.Substring(1, token.Length - 2);
                    var value = evaluate(subExpr);
                    return value;
                }
                else return int.Parse(token);
            }

            long evaluate(string expr)
            {
                int currentPos = 0;

                var tokens = new List<(string token, int startPos)>();

                while (true)
                {
                    var (token, offset) = readNextToken(expr, currentPos);
                    currentPos += offset;
                    if (token != null)
                    {
                        tokens.Add((token, offset - 1));
                    }
                    else break;
                }
                
                var addGroups = new List<List<string>>();
                var currentAddGroup = new List<string>();
                addGroups.Add(currentAddGroup);
                for (int iToken = 0; iToken < tokens.Count; iToken++)
                {
                    var (token, tokenStart) = tokens[iToken];
                    if (token != "*")
                    {
                        currentAddGroup.Add(token);
                    }
                    else
                    {
                        currentAddGroup = new List<string>();
                        addGroups.Add(currentAddGroup);
                    }
                }

                long resolveAddGroup(List<string> tokens)
                {
                    int currentPos = 0;

                    var result = resolveValueToken(tokens[0]);
                    currentPos++;

                    while (currentPos < tokens.Count)
                    {
                        if(tokens[currentPos] != "+") throw new Exception(tokens[currentPos]);
                        currentPos++;

                        var nextVal = resolveValueToken(tokens[currentPos]);
                        result += nextVal;
                        currentPos++;
                    }

                    return result;
                }

                var groupTotals = addGroups.Select(g => resolveAddGroup(g)).ToList();

                var product = groupTotals[0];
                for (int iSum = 1; iSum < groupTotals.Count; iSum++) product *= groupTotals[iSum];

                return product;
            }

            // part 1
            // long evaluate(string expr)
            // {
            //     int currentPos = 0;
            //     var (token, offset) = readNextToken(expr, currentPos);
            //     currentPos += offset;
            //
            //     if (token != null)
            //     {
            //         long currentValue = resolveValueToken(token);
            //
            //         while (true)
            //         {
            //             var (oper, operOffset) = readNextToken(expr, currentPos);
            //             currentPos += operOffset;
            //             if (oper == null) break;
            //
            //             var (token2, offset2) = readNextToken(expr, currentPos);
            //             currentPos += offset2;
            //
            //             var v2 = resolveValueToken(token2);
            //
            //             if (oper == "*")
            //             {
            //                 currentValue = currentValue * v2;
            //             }
            //             else if (oper == "+")
            //             {
            //                 currentValue = currentValue + v2;
            //             }
            //             else throw new Exception($"oper {oper}");
            //         }
            //
            //         return currentValue;
            //     }
            //     else throw new Exception($"empty expr {expr}");
            // }

            long total = 0;
            foreach (var line in lines)
            {
                total += evaluate(line);
            }

            Clipboard.Set(total);
        }
    }
}